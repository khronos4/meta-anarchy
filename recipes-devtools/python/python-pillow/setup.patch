--- setup.py	2013-12-30 05:56:02.000000000 +0200
+++ Pillow-2.3.0/setup.py	2014-03-09 18:34:38.643124000 +0200
@@ -183,111 +183,111 @@
             _add_directory(library_dirs, os.path.join(prefix, "lib"))
             _add_directory(include_dirs, os.path.join(prefix, "include"))
 
-        #
-        # add platform directories
-
-        if sys.platform == "cygwin":
-            # pythonX.Y.dll.a is in the /usr/lib/pythonX.Y/config directory
-            _add_directory(library_dirs, os.path.join(
-                "/usr/lib", "python%s" % sys.version[:3], "config"))
-
-        elif sys.platform == "darwin":
-            # attempt to make sure we pick freetype2 over other versions
-            _add_directory(include_dirs, "/sw/include/freetype2")
-            _add_directory(include_dirs, "/sw/lib/freetype2/include")
-            # fink installation directories
-            _add_directory(library_dirs, "/sw/lib")
-            _add_directory(include_dirs, "/sw/include")
-            # darwin ports installation directories
-            _add_directory(library_dirs, "/opt/local/lib")
-            _add_directory(include_dirs, "/opt/local/include")
-            # freetype2 ships with X11
-            _add_directory(library_dirs, "/usr/X11/lib")
-            _add_directory(include_dirs, "/usr/X11/include")
-            # if homebrew is installed, use its lib and include directories
-            import subprocess
-            try:
-                prefix = subprocess.check_output(['brew', '--prefix'])
-                if prefix:
-                    prefix = prefix.strip()
-                    _add_directory(library_dirs, os.path.join(prefix, 'lib'))
-                    _add_directory(include_dirs, os.path.join(prefix, 'include'))
-            except:
-                pass # homebrew not installed
-
-        elif sys.platform.startswith("linux"):
-            for platform_ in (plat.processor(), plat.architecture()[0]):
-
-                if not platform_:
-                    continue
-
-                if platform_ in ["x86_64", "64bit"]:
-                    _add_directory(library_dirs, "/lib64")
-                    _add_directory(library_dirs, "/usr/lib64")
-                    _add_directory(library_dirs, "/usr/lib/x86_64-linux-gnu")
-                    break
-                elif platform_ in ["i386", "i686", "32bit"]:
-                    _add_directory(library_dirs, "/usr/lib/i386-linux-gnu")
-                    break
-            else:
-                raise ValueError(
-                    "Unable to identify Linux platform: `%s`" % platform_)
+        # #
+        # # add platform directories
 
-            # XXX Kludge. Above /\ we brute force support multiarch. Here we
-            # try Barry's more general approach. Afterward, something should
-            # work ;-)
-            self.add_multiarch_paths()
-
-        elif sys.platform.startswith("netbsd"):
-                    _add_directory(library_dirs, "/usr/pkg/lib")
-                    _add_directory(include_dirs, "/usr/pkg/include")
+        # if sys.platform == "cygwin":
+        #     # pythonX.Y.dll.a is in the /usr/lib/pythonX.Y/config directory
+        #     _add_directory(library_dirs, os.path.join(
+        #         "/usr/lib", "python%s" % sys.version[:3], "config"))
+
+        # elif sys.platform == "darwin":
+        #     # attempt to make sure we pick freetype2 over other versions
+        #     _add_directory(include_dirs, "/sw/include/freetype2")
+        #     _add_directory(include_dirs, "/sw/lib/freetype2/include")
+        #     # fink installation directories
+        #     _add_directory(library_dirs, "/sw/lib")
+        #     _add_directory(include_dirs, "/sw/include")
+        #     # darwin ports installation directories
+        #     _add_directory(library_dirs, "/opt/local/lib")
+        #     _add_directory(include_dirs, "/opt/local/include")
+        #     # freetype2 ships with X11
+        #     _add_directory(library_dirs, "/usr/X11/lib")
+        #     _add_directory(include_dirs, "/usr/X11/include")
+        #     # if homebrew is installed, use its lib and include directories
+        #     import subprocess
+        #     try:
+        #         prefix = subprocess.check_output(['brew', '--prefix'])
+        #         if prefix:
+        #             prefix = prefix.strip()
+        #             _add_directory(library_dirs, os.path.join(prefix, 'lib'))
+        #             _add_directory(include_dirs, os.path.join(prefix, 'include'))
+        #     except:
+        #         pass # homebrew not installed
+
+        # elif sys.platform.startswith("linux"):
+        #     for platform_ in (plat.processor(), plat.architecture()[0]):
+
+        #         if not platform_:
+        #             continue
+
+        #         if platform_ in ["x86_64", "64bit"]:
+        #             _add_directory(library_dirs, "/lib64")
+        #             _add_directory(library_dirs, "/usr/lib64")
+        #             _add_directory(library_dirs, "/usr/lib/x86_64-linux-gnu")
+        #             break
+        #         elif platform_ in ["i386", "i686", "32bit"]:
+        #             _add_directory(library_dirs, "/usr/lib/i386-linux-gnu")
+        #             break
+        #     else:
+        #         raise ValueError(
+        #             "Unable to identify Linux platform: `%s`" % platform_)
+
+        #     # XXX Kludge. Above /\ we brute force support multiarch. Here we
+        #     # try Barry's more general approach. Afterward, something should
+        #     # work ;-)
+        #     self.add_multiarch_paths()
+
+        # elif sys.platform.startswith("netbsd"):
+        #             _add_directory(library_dirs, "/usr/pkg/lib")
+        #             _add_directory(include_dirs, "/usr/pkg/include")
 
-        # FIXME: check /opt/stuff directories here?
+        # # FIXME: check /opt/stuff directories here?
 
         #
         # locate tkinter libraries
 
-        if _tkinter:
-            TCL_VERSION = _tkinter.TCL_VERSION[:3]
+        # if _tkinter:
+        #     TCL_VERSION = _tkinter.TCL_VERSION[:3]
 
-        if _tkinter and not TCL_ROOT:
-            # we have Tkinter but the TCL_ROOT variable was not set;
-            # try to locate appropriate Tcl/Tk libraries
-            PYVERSION = sys.version[0] + sys.version[2]
-            TCLVERSION = TCL_VERSION[0] + TCL_VERSION[2]
-            roots = [
-                # common installation directories, mostly for Windows
-                # (for Unix-style platforms, we'll check in well-known
-                # locations later)
-                os.path.join("/py" + PYVERSION, "Tcl"),
-                os.path.join("/python" + PYVERSION, "Tcl"),
-                "/Tcl", "/Tcl" + TCLVERSION, "/Tcl" + TCL_VERSION,
-                os.path.join(os.environ.get("ProgramFiles", ""), "Tcl"), ]
-            for TCL_ROOT in roots:
-                TCL_ROOT = os.path.abspath(TCL_ROOT)
-                if os.path.isfile(os.path.join(TCL_ROOT, "include", "tk.h")):
-                    # FIXME: use distutils logging (?)
-                    print("--- using Tcl/Tk libraries at", TCL_ROOT)
-                    print("--- using Tcl/Tk version", TCL_VERSION)
-                    TCL_ROOT = _lib_include(TCL_ROOT)
-                    break
-            else:
-                TCL_ROOT = None
-
-        # add standard directories
-
-        # look for tcl specific subdirectory (e.g debian)
-        if _tkinter:
-            tcl_dir = "/usr/include/tcl" + TCL_VERSION
-            if os.path.isfile(os.path.join(tcl_dir, "tk.h")):
-                _add_directory(include_dirs, tcl_dir)
-
-        # standard locations
-        _add_directory(library_dirs, "/usr/local/lib")
-        _add_directory(include_dirs, "/usr/local/include")
+        # if _tkinter and not TCL_ROOT:
+        #     # we have Tkinter but the TCL_ROOT variable was not set;
+        #     # try to locate appropriate Tcl/Tk libraries
+        #     PYVERSION = sys.version[0] + sys.version[2]
+        #     TCLVERSION = TCL_VERSION[0] + TCL_VERSION[2]
+        #     roots = [
+        #         # common installation directories, mostly for Windows
+        #         # (for Unix-style platforms, we'll check in well-known
+        #         # locations later)
+        #         os.path.join("/py" + PYVERSION, "Tcl"),
+        #         os.path.join("/python" + PYVERSION, "Tcl"),
+        #         "/Tcl", "/Tcl" + TCLVERSION, "/Tcl" + TCL_VERSION,
+        #         os.path.join(os.environ.get("ProgramFiles", ""), "Tcl"), ]
+        #     for TCL_ROOT in roots:
+        #         TCL_ROOT = os.path.abspath(TCL_ROOT)
+        #         if os.path.isfile(os.path.join(TCL_ROOT, "include", "tk.h")):
+        #             # FIXME: use distutils logging (?)
+        #             print("--- using Tcl/Tk libraries at", TCL_ROOT)
+        #             print("--- using Tcl/Tk version", TCL_VERSION)
+        #             TCL_ROOT = _lib_include(TCL_ROOT)
+        #             break
+        #     else:
+        #         TCL_ROOT = None
+
+        # # add standard directories
+
+        # # look for tcl specific subdirectory (e.g debian)
+        # if _tkinter:
+        #     tcl_dir = "/usr/include/tcl" + TCL_VERSION
+        #     if os.path.isfile(os.path.join(tcl_dir, "tk.h")):
+        #         _add_directory(include_dirs, tcl_dir)
+
+        # # standard locations
+        # _add_directory(library_dirs, "/usr/local/lib")
+        # _add_directory(include_dirs, "/usr/local/include")
 
-        _add_directory(library_dirs, "/usr/lib")
-        _add_directory(include_dirs, "/usr/include")
+        # _add_directory(library_dirs, "/usr/lib")
+        # _add_directory(include_dirs, "/usr/include")
 
         #
         # insert new dirs *before* default libs, to avoid conflicts
@@ -446,32 +446,32 @@
             exts.append(Extension(
                 "PIL._webp", ["_webp.c"], libraries=libs, define_macros=defs))
 
-        if sys.platform == "darwin":
-            # locate Tcl/Tk frameworks
-            frameworks = []
-            framework_roots = [
-                "/Library/Frameworks",
-                "/System/Library/Frameworks"]
-            for root in framework_roots:
-                if (
-                        os.path.exists(os.path.join(root, "Tcl.framework")) and
-                        os.path.exists(os.path.join(root, "Tk.framework"))):
-                    print("--- using frameworks at %s" % root)
-                    frameworks = ["-framework", "Tcl", "-framework", "Tk"]
-                    dir = os.path.join(root, "Tcl.framework", "Headers")
-                    _add_directory(self.compiler.include_dirs, dir, 0)
-                    dir = os.path.join(root, "Tk.framework", "Headers")
-                    _add_directory(self.compiler.include_dirs, dir, 1)
-                    break
-            if frameworks:
-                exts.append(Extension(
-                    "PIL._imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
-                    extra_compile_args=frameworks, extra_link_args=frameworks))
-                feature.tcl = feature.tk = 1  # mark as present
-        elif feature.tcl and feature.tk:
-            exts.append(Extension(
-                "PIL._imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
-                libraries=[feature.tcl, feature.tk]))
+        # if sys.platform == "darwin":
+        #     # locate Tcl/Tk frameworks
+        #     frameworks = []
+        #     framework_roots = [
+        #         "/Library/Frameworks",
+        #         "/System/Library/Frameworks"]
+        #     for root in framework_roots:
+        #         if (
+        #                 os.path.exists(os.path.join(root, "Tcl.framework")) and
+        #                 os.path.exists(os.path.join(root, "Tk.framework"))):
+        #             print("--- using frameworks at %s" % root)
+        #             frameworks = ["-framework", "Tcl", "-framework", "Tk"]
+        #             dir = os.path.join(root, "Tcl.framework", "Headers")
+        #             _add_directory(self.compiler.include_dirs, dir, 0)
+        #             dir = os.path.join(root, "Tk.framework", "Headers")
+        #             _add_directory(self.compiler.include_dirs, dir, 1)
+        #             break
+        #     if frameworks:
+        #         exts.append(Extension(
+        #             "PIL._imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
+        #             extra_compile_args=frameworks, extra_link_args=frameworks))
+        #         feature.tcl = feature.tk = 1  # mark as present
+        # elif feature.tcl and feature.tk:
+        #     exts.append(Extension(
+        #         "PIL._imagingtk", ["_imagingtk.c", "Tk/tkImaging.c"],
+        #         libraries=[feature.tcl, feature.tk]))
 
         if os.path.isfile("_imagingmath.c"):
             exts.append(Extension("PIL._imagingmath", ["_imagingmath.c"]))
